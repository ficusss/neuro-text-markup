<HTML><HEAD><TITLE>Форматирование текстовых данных</TITLE></HEAD><BODY><font color="BLUE">$$$1$$$
С</font><font color="GREEN">амо по себе прог</font><font color="BLUE">раммирование подразумевает не только п</font><font color="GREEN">роце</font><font color="BLUE">сс написания кода, </font><font color="GREEN">но зачастую </font><font color="BLUE">на э</font><font color="GREEN">то тратится</font><font color="BLUE"> большая часть времени при разрабо</font><font color="GREEN">тке</font><font color="BLUE">. Только представьте, сколько усилий приходится тратить на то, чтобы держать в голове </font><font color="GREEN">множество правил и специфик</font><font color="BLUE">аций к конкретному я</font><font color="GREEN">зыку программирования, вместо того, чтобы </font><font color="BLUE">сосредоточиться на решаемой проблеме. Особенно может раздражать разнообраз</font><font color="GREEN">ие синт</font><font color="BLUE">аксиса в язык</font><font color="GREEN">ах: где-то нужна точка с</font><font color="BLUE"> запятой, где-то не нужны</font><font color="GREEN"> фигу</font><font color="BLUE">рн</font><font color="GREEN">ые скобки, где-то во</font><font color="BLUE">обще ни одно выражение не обходится б</font><font color="GREEN">ез </font><font color="BLUE">скобок. Что уж и говорить о холиварах, </font><font color="GREEN">напом</font><font color="BLUE">инающие рели</font><font color="GREEN">гиозные споры.
</font><font color="BLUE">$$$0$</font><font color="GREEN">$$
Ча</font><font color="BLUE">сто советуют начать разработку ПО с графического описания будущей системы, ее компонентов и связей между ними, чтобы</font><font color="GREEN"> на р</font><font color="BLUE">анних ст</font><font color="GREEN">адия</font><font color="BLUE">х опреде</font><font color="GREEN">ли</font><font color="BLUE">ть более выгодную структуру системы и мини</font><font color="GREEN">мизировать возможные пробле</font><font color="BLUE">мы в буд</font><font color="GREEN">ущ</font><font color="BLUE">ем. Графическое представление легче для понимания, чем текстовый вариант, но может иметь свои ограничения, к тому же это все равно придется переводить в понятный компилятору код. Конечно, на маленькие приложения (каки</font><font color="GREEN">ми они могут казаться вначале)</font><font color="BLUE"> это не распространяется, можно сразу приступит</font><font color="GREEN">ь к н</font><font color="BLUE">аписа</font><font color="GREEN">нию кода, </font><font color="BLUE">но проблема все равно остаетс</font><font color="GREEN">я — нужно </font><font color="BLUE">думать в р</font><font color="GREEN">амках о</font><font color="BLUE">пределенного языка программирования. Тем более, когда вы это делаете </font><font color="GREEN">в давно приевшемся вам импе</font><font color="BLUE">ративном</font><font color="GREEN"> стиле.
$$$1$$$
Программ</font><font color="BLUE">исты </font><font color="GREEN">по своей сути должны быть</font><font color="BLUE"> ленивы</font><font color="GREEN">ми, чтобы находить выгодные сп</font><font color="BLUE">особы решени</font><font color="GREEN">я задач </font><font color="BLUE">и </font><font color="GREEN">не трати</font><font color="BLUE">ть силы</font><font color="GREEN"> на рутину, тем более,</font><font color="BLUE"> глядя на тенденции увеличе</font><font color="GREEN">ния с</font><font color="BLUE">ложности ПО. Именно эт</font><font color="GREEN">о стимулирует рождение парадигм, языков программирования и абсолютно новых, казалось бы, и малоизвестных инструментов визуального программирования.
</font></BODY></HTML>